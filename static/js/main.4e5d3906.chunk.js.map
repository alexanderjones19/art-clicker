{"version":3,"sources":["components/Header.js","components/Navbar.js","components/Footer.js","components/Card.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","id","Navbar","props","message","score","highScore","Footer","Card","style","backgroundImage","concat","image","onClick","imageClick","Container","state","images","guessed","shuffleImages","array","i","length","j","Math","floor","random","_ref","_this","indexOf","setState","checkForWin","gameOver","prevState","Object","toConsumableArray","this","_this2","components_Navbar","components_Header","map","components_Card","key","clicked","components_Footer","Component","App","components_Container","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e5d3906.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n  return (\n    <header>\n      <div className=\"container\">\n        <div className=\"section\">\n          <div className=\"row\">\n            <div className=\"col s12\">\n              <h1 id=\"header-title\" className=\"center-align\">Art Clicker</h1>\n              <h4 id=\"header-subtext\" className=\"center-align flow-text\">Click these paintings to score. Beware though, don't click the same one twice.</h4>\n            </div>\n          </div>\n        </div>\n        <div className=\"divider\"></div>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;","import React from 'react';\n\nconst Navbar = props => {\n  return (\n    <div className=\"navbar-fixed\">\n      <nav>\n        <div className=\"nav-wrapper orange darken-4\">\n          <ul>\n            <li className=\"nav-items\">Art Clicker</li>\n            <li className=\"nav-items\">{props.message}</li>\n            <li className=\"nav-items\">Score: {props.score} | High Score: {props.highScore}</li>\n          </ul>\n        </div>\n      </nav>\n    </div>\n  );\n}\n\nexport default Navbar;","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <footer className=\"page-footer orange accent-4\">\n      <div className=\"footer-copyright orange darken-4\">\n        <div className=\"container center-align\">\n          &copy; Alexander Jones\n        </div>\n      </div>\n    </footer>\n  );\n}\n\nexport default Footer;","import React from 'react';\n\nconst Card = props => {\n  return (\n    <div className=\"col s6 m4 l3\">\n      <div\n        id={props.id}\n        style={{backgroundImage: `url(${props.image})`}}\n        className=\"paintings z-depth-2\"\n        onClick={() => props.imageClick(props.id)}\n      />\n    </div>\n  );\n}\n\nexport default Card;","import React, { Component } from 'react';\nimport Header from './Header';\nimport Navbar from './Navbar';\nimport Footer from './Footer';\nimport Card from './Card';\nimport images from '../images.json';\n\nclass Container extends Component {\n  state = {\n    score: 0,\n    highScore: 0,\n    images,\n    guessed: [],\n    message: 'Click an image to begin!'\n  };\n\n  componentDidMount() {\n    this.setState({\n      images: this.shuffleImages(this.state.images)\n    });\n  }\n\n  // Durstenfeld shuffle algorithm\n  shuffleImages = array => {\n    for (let i = array.length -1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n\n  imageClick = id => {\n    if (this.state.guessed.indexOf(id) === -1) {\n      this.setState({\n        score: this.state.score + 1,\n      }, () => {\n        if (this.state.score >= this.state.highScore) {\n          this.setState({\n            highScore: this.state.score\n          });\n        }\n        this.checkForWin(id);\n      });\n    }\n    else {\n      this.gameOver();\n    }\n  };\n\n  checkForWin = id => {\n    if (this.state.score < 12) {\n      this.setState(prevState => ({\n        guessed: [...prevState.guessed, id],\n        message: 'Good! Keep going!'\n      }));\n      this.shuffleImages(this.state.images);\n    }\n    else if (this.state.score === 12) {\n      this.setState({\n        message: 'You win!'\n      });\n    }\n    else {\n      this.gameOver();\n    }\n  };\n\n  gameOver = () => {\n    this.setState({\n      score: 0,\n      highScore: this.state.highScore,\n      guessed: [],\n      message: 'Oops! Try again!',\n    });\n    this.shuffleImages(this.state.images);\n  };\n\n  render() {\n    return (\n      <div className=\"page-flexbox-wrapper\">\n        <Navbar\n          score={this.state.score}\n          highScore={this.state.highScore}\n          message={this.state.message}\n        />\n        <Header/>\n        <main>\n          <div className=\"container\">\n            <div className=\"section\">\n              <div className=\"row\">\n                {this.state.images.map(image => (\n                  <Card\n                    id={image.id}\n                    key={image.id}\n                    image={image.image}\n                    clicked={image.clicked}\n                    imageClick={this.imageClick}\n                    gameOver={this.gameOver}\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n        </main>\n        <Footer/>\n      </div>\n    );\n  }\n}\n\nexport default Container;","import React from 'react';\nimport Container from './components/Container';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div>\n      <Container/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}